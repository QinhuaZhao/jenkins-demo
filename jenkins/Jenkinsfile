pipeline {
  agent {
    kubernetes {
      yamlFile 'jenkins/KubernetesPod.yaml'
    }
  }
  environment{
    APP_NAME='jenkins-demo'
    ORIGIN_REPO='registry.cn-hangzhou.aliyuncs.com'
    REPO='qianxin-hub'
    IMAGE_NAME='jenkins-demo'
    IMAGE_TAG='latest'
    //IMAGE_TAG =  sh(returnStdout: true,script: 'echo $image_tag').trim()
    //ORIGIN_REPO =  sh(returnStdout: true,script: 'echo $origin_repo').trim()
    //REPO =  sh(returnStdout: true,script: 'echo $repo').trim()
    //BRANCH =  sh(returnStdout: true,script: 'echo $branch').trim()
  }
  stages {
    stage('Git'){
      steps{
        git branch: 'master', credentialsId: '', url: 'https://github.com/QinhuaZhao/demo.git'
      }
    }
    stage('Run maven') {
      steps {
        sh 'set'
        sh "echo OUTSIDE_CONTAINER_ENV_VAR = ${CONTAINER_ENV_VAR}"
        container('maven') {
          sh 'echo MAVEN_CONTAINER_ENV_VAR = ${CONTAINER_ENV_VAR}'
          sh 'mvn -version'
          sh 'mvn package -B -DskipTests'
        }
        container('busybox') {
          sh 'echo BUSYBOX_CONTAINER_ENV_VAR = ${CONTAINER_ENV_VAR}'
          sh '/bin/busybox'
        }
      }
    }
    stage('Image Build And Publish'){
      steps{
        container('kubectl'){
          kubectl get pod
        }
        container('kaniko') {
          sh "echo ${CONTAINER_ENV_VAR}"
          sh 'ls'
          sh 'cat /kaniko/.docker/config.json'
          sh '/kaniko/executor -f `pwd`/Dockerfile -c `pwd` --insecure --cache=true --destination=${ORIGIN_REPO}/${REPO}/${IMAGE_NAME}:${IMAGE_TAG}'
          //sh "kaniko -f `pwd`/Dockerfile -c `pwd` --insecure --skip-tls-verify --cache=true --destination=${ORIGIN_REPO}/${REPO}/${IMAGE_NAME}:${IMAGE_TAG}"
        }
      }
    }
  }
  post{
    always{
      script{
        println("always")
      }
    }
    success{
      script{
        println("success - 流水线成功")
        //gitlab.ChangeCommitStatus(projectId,commitSha,"success")
        //toemail.Email("流水线成功",userEmail)
      }
    }
    failure{
      script{
        println("failure - 流水线失败了！")
        //gitlab.ChangeCommitStatus(projectId,commitSha,"failed")
        //toemail.Email("流水线失败了！",userEmail)
      }
    }
    aborted{
      script{
        println("aborted - ")
        //gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
        //toemail.Email("流水线被取消了！",userEmail)
      }
    }
  }
}